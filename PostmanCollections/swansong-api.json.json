{
	"info": {
		"_postman_id": "93b176ce-c2bc-43e1-9735-ea3c5706a1e3",
		"name": "SwanSong",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "/api/login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6472e4ed-954c-424a-8c80-ffbb4a070b4a",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"token\", jsonData.jwtToken);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "b8128182-a6fd-4688-8417-58560f11f8f9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"Test100@hotmail.com\",\r\n  \"password\": \"Password#1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/login"
					},
					"response": []
				}
			],
			"id": "2eb195d8-f91c-47be-8e7e-b45be8d6f8e7"
		},
		{
			"name": "Album",
			"item": [
				{
					"name": "/api/albums?pageNumber=1&pageSize=5",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "76c0ac5c-c475-4b96-a7cf-dc8ed6e17803",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Schema validation', () => { \r",
									"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('albums_paging_schema')));\r",
									"});\r",
									"\r",
									"pm.test(\"albums present\", () => {\r",
									"    let json = pm.response.json();\r",
									"    let albums = json.data\r",
									"    pm.expect(albums).to.be.an(\"array\");\r",
									"    pm.expect(albums).to.have.length == 5;\r",
									"});\r",
									"\r",
									"pm.test(\"paging properties\", () => {\r",
									"    let response = pm.response.json();  \r",
									"    pm.expect(response.pageNumber).to.eql(1);  \r",
									"    pm.expect(response.pageSize).to.eql(5);  \r",
									"    pm.expect(response.totalPages).to.greaterThan(2);\r",
									"    pm.expect(response.totalRecords).to.greaterThan(10);  \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "d47579ba-10ea-4634-a9f2-5a460db96e53",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/albums?pageNumber=1&pageSize=5",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"albums"
							],
							"query": [
								{
									"key": "pageNumber",
									"value": "1"
								},
								{
									"key": "pageSize",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/albums/search-by-letter/t (Success)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c92a04bd-ae57-4338-aa5a-ca486d4e2a01",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"  \r",
									"pm.test('Schema validation', () => { \r",
									"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('albums_schema')));\r",
									"}); \r",
									"\r",
									"pm.test(\"Has Sandy Denny album\", function () {\r",
									"    let albums = pm.response.json(); \r",
									"    const album = albums.find(m => m.name === \"The North Star Grassman and the Ravens\");    \r",
									"    pm.expect(album).to.be.an(\"object\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "1545a6d5-8028-4d1e-ad23-8aa98fd1d047",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/api/albums/search-by-letter/t"
					},
					"response": []
				},
				{
					"name": "/api/albums/search-by-letter (Fail 404)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "c0ecb72f-6f50-4664-a221-504d8177d18b"
							}
						}
					],
					"id": "d8dd160d-6d0c-4067-9e35-42a89aa6f4b2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/api/albums/search-by-letter/"
					},
					"response": []
				},
				{
					"name": "/api/albums/search/nevermind  (Success)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "db5fe399-b22d-4b19-ada0-ed6347ddf2cf",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									" \r",
									"pm.test('Schema validation', () => {\r",
									"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('albums_schema')));\r",
									"}); \r",
									"\r",
									"pm.test(\"Has Nevermind album\", function () {\r",
									"    let albums = pm.response.json(); \r",
									"    const album = albums.find(m => m.name === \"Nevermind\");    \r",
									"    pm.expect(album).to.be.an(\"object\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "03d34ede-da1d-48b2-b38e-b6925017f188",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/api/albums/search/nevermind"
					},
					"response": []
				},
				{
					"name": "/api/albums/search/test123 (Nothing Found)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Has Nevermind album\", function () {\r",
									"    let albums = pm.response.json(); \r",
									"     pm.expect(albums).to.have.length == 0;\r",
									"});"
								],
								"type": "text/javascript",
								"id": "934eb3aa-db7b-47e5-af82-f9e251f48f48"
							}
						}
					],
					"id": "80564166-ec26-4d0d-bebb-49b1575d2731",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/api/albums/search/test123 "
					},
					"response": []
				},
				{
					"name": "/api/albums/search/ (Fail 404)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "aea564d2-765d-4861-9198-b7d44264f978"
							}
						}
					],
					"id": "103b05fb-cf4d-46bd-935b-3f6b3f69956f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/api/albums/search/"
					},
					"response": []
				},
				{
					"name": "/api/albums/album/8 (Success)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5d0f3bc0-875a-4eea-9ca3-dbfb35cc4729",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"}); \r",
									" \r",
									"pm.test('Schema validation', () => {\r",
									"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('album_schema')));\r",
									"});\r",
									"\r",
									"pm.test(\"Has Led Zeppelin 1 album\", function () {\r",
									"    let album = pm.response.json();    \r",
									"    pm.expect(album).to.be.an(\"object\");\r",
									"    pm.expect(album.name).to.eql(\"Led Zeppelin 1\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "15c810d8-953d-47fd-a531-d70dd9901ad9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/api/albums/album/1"
					},
					"response": []
				},
				{
					"name": "/api/albums/album/100000000 (Not Found)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "53a473f2-afbf-4f5d-b867-6f88e2193e29",
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "dd90c1a1-4343-4e6c-a067-1180585df382",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/api/albums/album/100000000"
					},
					"response": []
				},
				{
					"name": "/api/albums/album/ (Fail 404)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "e3ce18c0-a6b8-4786-9afd-a291efa1bb5d"
							}
						}
					],
					"id": "cefefd7f-340f-4021-8322-e71921e97a26",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/api/albums/album/"
					},
					"response": []
				},
				{
					"name": "/api/albums/artist/1 (Success)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fd34b202-aa8e-408e-afd2-0654b5401828",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Schema validation', () => {\r",
									"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('albums_schema')));\r",
									"}); \r",
									" \r",
									"pm.test(\"albums present\", () => {\r",
									"    let albums = pm.response.json();\r",
									"    pm.expect(albums).to.be.an(\"array\");\r",
									"    pm.expect(albums).to.have.length > 5;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "118d2d07-b327-4de8-97d3-01b93ce05fe4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/api/albums/artist/1"
					},
					"response": []
				},
				{
					"name": "/api/albums/artist/1000000 (Not Found)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Has no artist\", function () {\r",
									"    let artist = pm.response.json(); \r",
									"     pm.expect(artist).to.have.length == 0;\r",
									"});"
								],
								"type": "text/javascript",
								"id": "d1437492-b38d-4d04-892e-5718854245b6"
							}
						}
					],
					"id": "074888f3-c35e-43cd-9c23-17fadb7b25d0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/api/albums/artist/1000000"
					},
					"response": []
				},
				{
					"name": "/api/albums/artist/ (Fail 404)",
					"id": "e9d3f743-0aab-4f7a-b21a-bdaff517f469",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/api/albums/artist/"
					},
					"response": []
				},
				{
					"name": "/api/albums/album/add (Insert) (Success)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1dd31d82-b7a2-43d2-992d-fd7cd557c3f2",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();   \r",
									" \r",
									"pm.test('Schema validation', () => {\r",
									"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('album_actions_schema')));\r",
									"}); \r",
									" \r",
									"pm.test(\"Has album id greater than zero\", function () {  \r",
									"    pm.expect(jsonData.id).to.be.greaterThan(0)\r",
									"});\r",
									"\r",
									"pm.environment.set(\"albumId\", jsonData.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "5d600da2-1171-47dd-8679-36dceb6f9bc6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{  \r\n  \"id\": 0,\r\n  \"name\": \"How the West was Won\",\r\n  \"artistId\": 1, \r\n  \"releaseDate\": null,\r\n  \"recordedDate\": null,\r\n  \"labelId\": null,\r\n  \"studioId\": null,   \r\n  \"length\": \"45:23\",\r\n  \"producers\": null,\r\n  \"arrangers\": null,\r\n  \"engineers\": null,\r\n  \"artwork\": null,\r\n  \"photo\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/albums/album/add"
					},
					"response": []
				},
				{
					"name": "/api/albums/album/add (Insert) (Fail)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1dd31d82-b7a2-43d2-992d-fd7cd557c3f2",
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"}); \r",
									" \r",
									"pm.test('Schema validation', () => {\r",
									"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('action_response_schema')));\r",
									"}); \r",
									" \r",
									"let jsonData = pm.response.json();  \r",
									"\r",
									"pm.test(\"Has correct messages\", function () {\r",
									"    pm.expect(jsonData.messages).to.have.length == 2;\r",
									"    pm.expect(jsonData.messages[0].text).to.eql(\"Album name is required.\"); \r",
									"    pm.expect(jsonData.messages[0].severity).to.eql(\"error\");\r",
									"    pm.expect(jsonData.messages[1].text).to.eql(\"Album name length between 1 and 120.\");\r",
									"    pm.expect(jsonData.messages[1].severity).to.eql(\"error\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "5776fa79-9e6b-4a3c-b43f-4b3f68ea03f1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{  \r\n  \"id\": 0,\r\n  \"name\": \"\",\r\n  \"artistId\": 1, \r\n  \"releaseDate\": null,\r\n  \"recordedDate\": null,\r\n  \"labelId\": null,\r\n  \"studioId\": null,   \r\n  \"length\": \"45:23\",\r\n  \"producers\": null,\r\n  \"arrangers\": null,\r\n  \"engineers\": null,\r\n  \"artwork\": null,\r\n  \"photo\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/albums/album/add"
					},
					"response": []
				},
				{
					"name": "/api/albums/album/update (Update)  (Success)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bcfedbac-0418-42d9-b882-862119a262a6",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Schema validation', () => {\r",
									"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('album_actions_schema')));\r",
									"}); \r",
									"\r",
									"pm.test(\"Has How The West Was Won 2\", function () {\r",
									"    let response = pm.response.json();     \r",
									"    pm.expect(response.messages[0].text).to.eql(\"The album How The West Was Won 2 has been saved.\"); \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "a9310f46-2eed-4ba7-a4e6-db5001e646ed",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": {{albumId}},\r\n    \"name\": \"How The West Was Won 2\",\r\n    \"artistId\": 1,\r\n    \"artistName\": null,\r\n    \"releaseDate\": null,\r\n    \"recordedDate\": null,\r\n    \"labelId\": null, \r\n    \"studioId\": null, \r\n    \"length\": \"45:23\",\r\n    \"producers\": null,\r\n    \"arrangers\": null,\r\n    \"engineers\": null,\r\n    \"artwork\": null,\r\n    \"photo\": null,\r\n    \"songs\": null \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/albums/album/update"
					},
					"response": []
				},
				{
					"name": "/api/albums/album/upload-photo/{{albumId}} (Success)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "53062272-c6b1-420e-b84c-cc9b266f9223",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									" \r",
									"pm.test('Schema validation', () => {\r",
									"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('album_upload_photo_schema')));\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json(); \r",
									" \r",
									"pm.test(\"Has filename\", function () { \r",
									"    pm.expect(jsonData.filename).to.be.not.null; \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "77667f8a-139f-452a-9e79-63af7285224e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "thesongremainsthesame.jpg"
								}
							]
						},
						"url": "{{baseUrl}}/api/albums/album/upload-photo/{{albumId}}"
					},
					"response": []
				},
				{
					"name": "/api/albums/album/{{albumId}} (Success)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "221a039a-8b69-4906-8537-4a4922b56926",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Schema validation', () => {\r",
									"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('album_actions_schema')));\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json(); \r",
									" \r",
									"pm.test(\"Has correct message\", function () { \r",
									"    pm.expect(jsonData.messages[0].text).to.eql(\"The album How The West Was Won 2 has been deleted.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "2e94df47-53b1-420c-884c-a35abf4e98fb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseUrl}}/api/albums/album/{{albumId}}"
					},
					"response": []
				},
				{
					"name": "/api/albums/album/8888888 (Not Found)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "221a039a-8b69-4906-8537-4a4922b56926",
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test('Schema validation', () => {\r",
									"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('album_delete_schema')));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "f1815fab-ca56-4c7a-989a-bca83613ad76",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseUrl}}/api/albums/album/8888888"
					},
					"response": []
				},
				{
					"name": "/api/albums/search-by-letter/@ (Nothing Found)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"No Albums\", () => {\r",
									"    let albums = pm.response.json();\r",
									"    pm.expect(albums).to.be.an(\"array\");\r",
									"    pm.expect(albums).to.have.length == 0;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"id": "ce8ed7f4-17d8-453d-bba1-84705f9cb091"
							}
						}
					],
					"id": "a7bf5516-313d-4de0-835b-770859ba68df",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/api/albums/search-by-letter/@"
					},
					"response": []
				}
			],
			"id": "2c381c56-530b-4a58-a834-981ee7ed4f6b"
		},
		{
			"name": "Album Song",
			"item": [
				{
					"name": "/api/album/songs/1 (Success)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f65b7e17-e8fb-4174-9abd-31eb6dba96c2",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									" \r",
									"pm.test('Schema validation', () => {\r",
									"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('album_song_schema')));\r",
									"}); \r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Album songs present\", () => {  \r",
									"    pm.expect(jsonData).to.have.length == 9;\r",
									"});\r",
									"\r",
									"pm.test(\"Check album song order\", () => { \r",
									"    let song1 = jsonData[0];\r",
									"    pm.expect(song1.side).to.eql(1);\r",
									"    pm.expect(song1.order).to.eql(1);\r",
									"    pm.expect(song1.song.title).to.eql(\"Good Times Bad Times\");\r",
									"\r",
									"    let song9 = jsonData[8];\r",
									"    pm.expect(song9.side).to.eql(2);\r",
									"    pm.expect(song9.order).to.eql(9);\r",
									"    pm.expect(song9.song.title).to.eql(\"How Many More Times\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "a65acdd7-f533-4736-998a-8132e13ad7ea",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/api/album/songs/1"
					},
					"response": []
				},
				{
					"name": "/api/album/songs/1000000 (Nothing Found)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "214d8326-aebe-42a6-a328-103e2fd7b21d",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									" \r",
									"pm.test(\"No Album songs\", () => {  \r",
									"    pm.expect(jsonData).to.be.an('array').that.is.empty; \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "8024c9cd-28f3-4aa7-b24d-6ee409a7b65b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/api/album/songs/1000000"
					},
					"response": []
				},
				{
					"name": "/api/album/songs/ (Fail 404)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "205c7eaa-7013-4520-98ae-27b6d34dfea6"
							}
						}
					],
					"id": "ab71d160-fc74-42da-90b8-86778a64c30d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/api/album/songs/"
					},
					"response": []
				},
				{
					"name": "/api/albums/album/add (to add songs to)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a39d3eb7-665e-45de-b743-ab96dbb4ea25",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();   \r",
									"\r",
									"pm.test('Schema validation', () => {\r",
									"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('album_actions_schema')));\r",
									"}); \r",
									"\r",
									"pm.test(\"Has album id greater than zero\", function () { \r",
									"    pm.expect(jsonData).to.be.an(\"object\", \"Could not find the ablum\");\r",
									"    pm.expect(jsonData.id).to.be.greaterThan(0)\r",
									"});\r",
									"\r",
									"pm.environment.set(\"albumId\", jsonData.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "bf3fe089-0d35-4372-b297-f81e73b84d5b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{  \r\n  \"name\": \"Better Days\",\r\n  \"artistId\": 1, \r\n  \"releaseDate\": null,\r\n  \"recordedDate\": null,\r\n  \"labelId\": null,\r\n  \"studioId\": null,   \r\n  \"length\": \"45:23\",\r\n  \"producers\": null,\r\n  \"arrangers\": null,\r\n  \"engineers\": null,\r\n  \"artwork\": null,\r\n  \"photo\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/albums/album/add"
					},
					"response": []
				},
				{
					"name": "/api/album/songs/song/add (Success)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3ba3e0ea-0fd9-4ac0-a68f-783b14876433",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"}); \r",
									"\r",
									"pm.test('Schema validation', () => {\r",
									"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('album_song_add_schema')));\r",
									"}); \r",
									" \r",
									"let jsonData = pm.response.json();  \r",
									"\r",
									"pm.test(\"Has album song id greater than zero\", function () { \r",
									"    pm.expect(jsonData.id).to.be.greaterThan(0);\r",
									"    pm.expect(jsonData.songId).to.be.greaterThan(0);\r",
									"    pm.expect(jsonData.messages[0].text).to.eql(\"The album song has been saved.\"); \r",
									"}); \r",
									"\r",
									"pm.environment.set(\"albumSongId\", jsonData.id);\r",
									"pm.environment.set(\"songId\", jsonData.songId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "dc921bd6-7151-41dc-b881-ca0dd50fbd6b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{   \r\n  \"side\": 1,\r\n  \"order\": 1,\r\n  \"albumId\": {{albumId}},\r\n  \"song\": { \r\n    \"title\": \"Test Song 2\",\r\n    \"length\": \"04:23\"\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/album/songs/song/add"
					},
					"response": []
				},
				{
					"name": "/api/album/songs/song/{{albumSongId}} (Success)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "726daacf-4852-41d1-86fb-8edc9f0ec2e0",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Schema validation', () => {\r",
									"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('album_song_add_schema')));\r",
									"}); \r",
									"\r",
									"let jsonData = pm.response.json();  \r",
									"\r",
									"pm.test(\"Has deleted message\", function () {  \r",
									"    pm.expect(jsonData.messages[0].text).to.eql(\"The album song has been deleted.\"); \r",
									"}); "
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "a22a4c3f-28cf-47ee-830b-408fdccb43cc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseUrl}}/api/album/songs/song/{{albumSongId}}"
					},
					"response": []
				},
				{
					"name": "/api/songs/song/{{songId}} (Success)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "726daacf-4852-41d1-86fb-8edc9f0ec2e0",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Schema validation', () => {\r",
									"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('album_song_delete_schema')));\r",
									"}); \r",
									"\r",
									"let jsonData = pm.response.json();  \r",
									"\r",
									"pm.test(\"Has deleted message\", function () {  \r",
									"    pm.expect(jsonData.messages[0].text).to.eql(\"The song has been deleted.\"); \r",
									"}); "
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "3f0f9862-9597-41df-ab64-88203be442a9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseUrl}}/api/songs/song/{{songId}}"
					},
					"response": []
				},
				{
					"name": "/api/albums/album/{{albumId}}  (Success)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "14a0da3a-cfd0-43f7-88e2-6be1b46fb8fa",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Schema validation', () => {\r",
									"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('album_actions_schema')));\r",
									"}); "
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "369ebf57-af6b-488d-ba37-31ee1b5c25ca",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseUrl}}/api/albums/album/{{albumId}}"
					},
					"response": []
				}
			],
			"id": "7671313f-188c-46f7-b89e-8355fbf5b33d"
		},
		{
			"name": "Artist",
			"item": [
				{
					"name": "/api/artists?pageNumber=1&pageSize=5",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "18673f76-81f3-4b34-8d1e-1e4a7f65631c",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Schema validation', () => {\r",
									"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('artist_paging_schema')));\r",
									"}); \r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"artists present\", () => {\r",
									"    pm.expect(jsonData.data).to.have.length == 5;\r",
									"});\r",
									"\r",
									"pm.test(\"paging properties\", () => { \r",
									"    pm.expect(jsonData.pageNumber).to.eql(1);  \r",
									"    pm.expect(jsonData.pageSize).to.eql(5);  \r",
									"    pm.expect(jsonData.totalPages).to.greaterThan(3);\r",
									"    pm.expect(jsonData.totalRecords).to.greaterThan(10);   \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "7cfacf5b-9768-4c7d-bb44-f7e3be5af0eb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/artists?pageNumber=1&pageSize=5",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"artists"
							],
							"query": [
								{
									"key": "pageNumber",
									"value": "1"
								},
								{
									"key": "pageSize",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/artists (Success)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6053d248-7d36-47a7-8c57-85a4e601f1a6",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Schema validation', () => {\r",
									"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('lookup_schema')));\r",
									"}); \r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"artists present\", () => { \r",
									"    pm.expect(jsonData).to.have.length > 5;\r",
									"}); \r",
									"\r",
									"pm.test(\"Has Led Zeppelin\", function () {\r",
									"    let artists = pm.response.json(); \r",
									"    const artist = artists.find(m => m.name === \"Led Zeppelin\");    \r",
									"    pm.expect(artist).to.be.an(\"object\", \"Could not find the artist\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "49628d95-d96d-44b5-b3c1-13f0e278beaf",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/api/artists/lookups"
					},
					"response": []
				},
				{
					"name": "/api/artists/search/denny (Success)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "718baa18-47d8-4742-8bd3-b833d1d52422",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Schema validation', () => {\r",
									"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('artists_schema')));\r",
									"});  \r",
									"\r",
									"let jsonData = pm.response.json(); \r",
									"\r",
									"pm.test(\"Has Sandy Denny\", function () {    ; \r",
									"    const artist = jsonData.find(m => m.name === \"Sandy Denny\");    \r",
									"    pm.expect(artist).to.be.an(\"object\", \"Could not find the artist\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "8243963c-3e5a-4c08-be9b-3531f9b19d48",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/api/artists/search/denny"
					},
					"response": []
				},
				{
					"name": "/api/artists/search/test123 (Nothing Found)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "619ca235-56e7-40c1-9e7d-459874454cf9",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"No Artists\", () => {  \r",
									"    pm.expect(jsonData).to.be.an('array').that.is.empty; \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "8185f018-afdf-413b-9242-fb7dcc0cbfe0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/api/artists/search/test123"
					},
					"response": []
				},
				{
					"name": "/api/artists/search/ (Fail 404)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "06734a2e-b007-46d2-a611-fb2efc512689"
							}
						}
					],
					"id": "7b1a36fb-c704-4d44-a2f1-572880c1d7e3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/api/artists/search/"
					},
					"response": []
				},
				{
					"name": "/api/artists/search-by-letter/n",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7a1b6cce-9cc1-4954-9738-e6b29e4fb01c",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Schema validation', () => {\r",
									"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('artists_schema')));\r",
									"});  \r",
									"\r",
									"let jsonData = pm.response.json(); \r",
									"\r",
									"pm.test(\"Has Nirvana\", function () { \r",
									"    const artist = jsonData.find(m => m.name === \"Nirvana\");    \r",
									"    pm.expect(artist).to.be.an(\"object\", \"Could not find the artist\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "3a35b25e-de96-4696-ad26-dab19b5efb0f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/api/artists/search-by-letter/n"
					},
					"response": []
				},
				{
					"name": "/api/artists/search-by-letter/@ (Nothing Found)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a1c12887-97e6-4225-a25b-3bedfaacf59c",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"No Artists\", () => {  \r",
									"    pm.expect(jsonData).to.be.an('array').that.is.empty; \r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "b0bff835-fad7-48b6-a4c2-7e12285a065b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/api/artists/search-by-letter/@"
					},
					"response": []
				},
				{
					"name": "/api/artists/search-by-letter/ (Fail 404)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "ac0dfeaa-4075-42c3-8535-52a0e331bfee"
							}
						}
					],
					"id": "4dba2939-0c6d-4749-832d-857af2f74140",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/api/artists/search-by-letter/"
					},
					"response": []
				},
				{
					"name": "/api/artists/artist/1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "776d9b65-cff9-41a8-ae7a-e3d9ab771e42",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Schema validation', () => {\r",
									"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('artist_schema')));\r",
									"});  \r",
									"\r",
									"let jsonData = pm.response.json(); \r",
									" \r",
									"pm.test(\"Has Led Zeppelin\", function () { \r",
									"    pm.expect(jsonData).to.be.an(\"object\", \"Could not find the artist\");\r",
									"    pm.expect(jsonData.name).to.eql(\"Led Zeppelin\"); \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "b3c68b81-4137-4843-9a12-b645367a0f4a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/api/artists/artist/1"
					},
					"response": []
				},
				{
					"name": "/api/artists/artist/ (Fail 404)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "f9dab968-59a9-48ae-b52a-6d85c5813bf4"
							}
						}
					],
					"id": "58d41f34-4f1d-4721-8008-2d5032ce36a4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/api/artists/artist/"
					},
					"response": []
				},
				{
					"name": "/api/artists/artist/add (Insert) (Success)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b2e80281-6c93-4f8c-b6ef-cfc21cc75738",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"}); \r",
									" \r",
									"pm.test('Schema validation', () => {\r",
									"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('album_actions_schema')));\r",
									"}); \r",
									"  \r",
									"let jsonData = pm.response.json();  \r",
									"\r",
									"pm.test(\"Has artist id greater than zero\", function () { \r",
									"    pm.expect(jsonData).to.be.an(\"object\", \"Could not find the artist\");\r",
									"    pm.expect(jsonData.id).to.be.greaterThan(0)\r",
									"});\r",
									"\r",
									"pm.environment.set(\"artistId\", jsonData.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "fac67c54-9810-43ba-b431-44067cc97bc5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{   \r\n  \"name\": \"Tom Petty\",\r\n  \"photo\": null,\r\n  \"formationYear\": 1976,\r\n  \"disbandYear\": 2019,\r\n  \"countryId\": 2\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/artists/artist/add"
					},
					"response": []
				},
				{
					"name": "/api/artists/artist/update (Update) (Success)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6e926934-7c22-4e02-83d1-41355d5fc8b3",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Schema validation', () => {\r",
									"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('album_actions_schema')));\r",
									"}); \r",
									"  \r",
									"let jsonData = pm.response.json();  \r",
									"\r",
									"pm.test(\"Has Tom Petty 2\", function () { \r",
									"    pm.expect(jsonData).to.be.an(\"object\", \"Could not find the artist\"); \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "6a787498-6867-4f7e-ad40-1eaa24c7c8bc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{  \r\n  \"id\": {{artistId}},\r\n  \"name\": \"Tom Petty 2\",\r\n  \"photo\": null,\r\n  \"formationYear\": 1976,\r\n  \"disbandYear\": 2019,\r\n  \"countryId\": 2\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/artists/artist/update"
					},
					"response": []
				},
				{
					"name": "/api/artists/artist/upload-photo/{{artistId}} (Success)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "83ada397-9847-4813-96a4-08312866d66c",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Schema validation', () => {\r",
									"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('album_upload_photo_schema')));\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json(); \r",
									" \r",
									"pm.test(\"Has filename\", function () { \r",
									"    pm.expect(jsonData.filename).to.be.not.null; \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "15f00d7e-50b9-4066-af75-36c00e330f31",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "sandydenny.jpg"
								}
							]
						},
						"url": "{{baseUrl}}/api/artists/artist/upload-photo/{{artistId}}"
					},
					"response": []
				},
				{
					"name": "/api/artists/artist/delete/{{artistId}} (Delete) (Success)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d077b3b0-8882-462f-a3d3-8012da73754d",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Schema validation', () => {\r",
									"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('album_actions_schema')));\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json(); \r",
									" \r",
									"pm.test(\"Has correct message\", function () { \r",
									"    pm.expect(jsonData.messages[0].text).to.eql(\"The artist has been deleted.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "f803e99f-2267-4cd0-b38f-e9b5a9259152",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseUrl}}/api/artists/artist/{{artistId}}"
					},
					"response": []
				}
			],
			"id": "20f1a314-6dc8-4641-9cf9-40fb0fc1b028"
		},
		{
			"name": "Member",
			"item": [
				{
					"name": "/api/members/1 (Success)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3540851e-7c69-4248-8f9f-0a2d041e98d8",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									" \r",
									"pm.test('Schema validation', () => {\r",
									"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('members_schema')));\r",
									"}); \r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"members present\", () => { \r",
									"    pm.expect(jsonData).to.have.length == 4;\r",
									"}); \r",
									"\r",
									"pm.test(\"Has Jimmy Page\", function () { \r",
									"    const member = jsonData.find(m => m.stageName === \"Jimmy Page\");    \r",
									"    pm.expect(member).to.be.an(\"object\", \"Could not find the member\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "f4590769-9960-4a28-9b17-2e7d2e1cb02e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/api/members/1"
					},
					"response": []
				},
				{
					"name": "/api/members/100000 (Not Found)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a8643fe3-48aa-4a78-90d9-d95fc83c5951",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"}); \r",
									"\r",
									"let jsonData = pm.response.json();   \r",
									"\r",
									"pm.test(\"No Members\", () => {  \r",
									"    pm.expect(jsonData).to.be.an('array').that.is.empty; \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "747e6567-c7f9-4df3-81a7-5041900f9b54",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/api/members/100000"
					},
					"response": []
				},
				{
					"name": "/api/artists/artist/add (to add members to)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0b479e3d-e2c7-4acb-b01b-d80f7684ec17",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Schema validation', () => {\r",
									"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('album_actions_schema')));\r",
									"}); \r",
									"  \r",
									"let jsonData = pm.response.json();   \r",
									"\r",
									"pm.test(\"Has artist id greater than zero\", function () { \r",
									"    pm.expect(jsonData).to.be.an(\"object\", \"Could not find the artist\");\r",
									"    pm.expect(jsonData.id).to.be.greaterThan(0)\r",
									"});\r",
									"\r",
									"pm.environment.set(\"artistId\", jsonData.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "8b88bd48-f91e-432f-86fe-e7a7611dc1bc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{  \r\n  \"id\": 0,\r\n  \"name\": \"Test Group\",\r\n  \"photo\": null,\r\n  \"formationYear\": 1976,\r\n  \"disbandYear\": 2019,\r\n  \"countryId\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/artists/artist/add"
					},
					"response": []
				},
				{
					"name": "/api/members/member/add (Insert) (Success)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4b2eab94-f1da-437e-b6b5-268d4b677ae6",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Schema validation', () => {\r",
									"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('album_actions_schema')));\r",
									"}); \r",
									"  \r",
									"let jsonData = pm.response.json();  \r",
									" \r",
									"pm.test(\"Has member id greater than zero\", function () { \r",
									"    pm.expect(jsonData).to.be.an(\"object\", \"Could not find the member\");\r",
									"    pm.expect(jsonData.id).to.be.greaterThan(0)\r",
									"    pm.expect(jsonData.messages[0].text).to.eql(\"The member has been saved.\");\r",
									"});\r",
									" \r",
									"pm.environment.set(\"memberId\", jsonData.id); "
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "24d9eb18-d9e3-47c5-94fb-67005e31caad",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 0,\r\n  \"artistId\": {{artistId}},\r\n  \"stageName\": \"Test Member\",\r\n  \"firstName\": \"Test\",\r\n  \"middleName\": null,\r\n  \"surname\": \"Member\",\r\n  \"photo\": null,\r\n  \"dateOfBirth\": \"2021-09-29T14:19:12.947Z\",\r\n  \"dateOfDeath\": \"2021-09-30T14:19:12.947Z\",\r\n  \"birthPlaceId\": 0  \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/members/member/add"
					},
					"response": []
				},
				{
					"name": "/api/members/member/update (Update) (Success)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "11dfc682-cf58-436d-b034-3be61267b583",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Schema validation', () => {\r",
									"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('album_actions_schema')));\r",
									"}); \r",
									"  \r",
									"let jsonData = pm.response.json();  \r",
									"\r",
									"pm.test(\"Has Test Member 2\", function () { \r",
									"    pm.expect(jsonData).to.be.an(\"object\", \"Could not find the artist\"); \r",
									"});\r",
									"\r",
									" "
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "371acf91-1aef-42ec-9ae5-4d633f9c641e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": {{memberId}},\r\n  \"artistId\": {{artistId}},\r\n  \"stageName\": \"Test Member 2\",\r\n  \"firstName\": \"Test\",\r\n  \"middleName\": null,\r\n  \"surname\": \"Member\",\r\n  \"photo\": null,\r\n  \"dateOfBirth\": \"2021-09-29T14:19:12.947Z\",\r\n  \"dateOfDeath\": \"2021-09-30T14:19:12.947Z\",\r\n  \"birthPlaceId\": 0  \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/members/member/update"
					},
					"response": []
				},
				{
					"name": "/api/members/member/upload-photo/{{memberId}} (Success)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3fafbf8f-602b-4272-843a-90b8eb8433d4",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Schema validation', () => {\r",
									"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('album_upload_photo_schema')));\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json(); \r",
									" \r",
									"pm.test(\"Has filename\", function () { \r",
									"    pm.expect(jsonData.filename).to.be.not.null; \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "cce9e8b6-5373-462a-be7b-acd15ddb826c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "sandydenny.jpg"
								}
							]
						},
						"url": "{{baseUrl}}/api/members/member/upload-photo/{{memberId}}"
					},
					"response": []
				},
				{
					"name": "/api/members?pageNumber=1&pageSize=5",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7c51b035-892a-48e5-8dfe-9a493e8766a3",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Schema validation', () => {\r",
									"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('artist_paging_schema')));\r",
									"}); \r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"members present\", () => { \r",
									"    let members = jsonData.data\r",
									"    pm.expect(members).to.be.an(\"array\");\r",
									"    pm.expect(members).to.have.length == 5;\r",
									"});\r",
									"\r",
									"pm.test(\"paging properties\", () => { \r",
									"    pm.expect(jsonData.pageNumber).to.eql(1);  \r",
									"    pm.expect(jsonData.pageSize).to.eql(5);  \r",
									"    pm.expect(jsonData.totalPages).to.greaterThan(1);\r",
									"    pm.expect(jsonData.totalRecords).to.greaterThan(9);   \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "a5182e59-ef15-444b-a9e2-61c806cc1c30",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/members?pageNumber=1&pageSize=5",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"members"
							],
							"query": [
								{
									"key": "pageNumber",
									"value": "1"
								},
								{
									"key": "pageSize",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/api/members/member/{{memberId}} (Delete) (Success)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3f75ad9b-fe5d-4feb-8220-6e02e4cd9edd",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Schema validation', () => {\r",
									"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('album_actions_schema')));\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json(); \r",
									" \r",
									"pm.test(\"Has correct message\", function () { \r",
									"    pm.expect(jsonData.messages[0].text).to.eql(\"The member has been deleted.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "49f6841a-c938-4366-831f-b2526884675e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseUrl}}/api/members/member/{{memberId}}"
					},
					"response": []
				},
				{
					"name": "/api/artists/artist/{{artistId}} (Delete) (Success) Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "312d11a5-d036-4354-8c63-81328e39a795",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Schema validation', () => {\r",
									"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('album_actions_schema')));\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json(); \r",
									" \r",
									"pm.test(\"Has correct message\", function () { \r",
									"    pm.expect(jsonData.messages[0].text).to.eql(\"The artist has been deleted.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "72912f95-67b2-4d41-9b02-62004254ac32",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseUrl}}/api/artists/artist/{{artistId}}"
					},
					"response": []
				}
			],
			"id": "44f43f8f-fdc3-4506-a14b-b67508eed1f3"
		},
		{
			"name": "Lookup",
			"item": [
				{
					"name": "Country",
					"item": [
						{
							"name": "/api/countries/country/add (Success)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "763b4f31-fe05-4918-855d-d430002d8312",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Schema validation', () => {\r",
											"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('lookup_action_schema')));\r",
											"}); \r",
											"\r",
											"let jsonData = pm.response.json();   \r",
											"\r",
											"pm.test(\"Has country id greater than zero\", function () { \r",
											"    pm.expect(jsonData).to.be.an(\"object\", \"Could not find the country\");\r",
											"    pm.expect(jsonData.id).to.be.greaterThan(0)\r",
											"});\r",
											"\r",
											"pm.environment.set(\"countryId\", jsonData.id);\r",
											"pm.environment.set(\"countryUpdateName\", jsonData.name);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b864f3c8-5e41-47d5-987c-1a50b0fd4c21",
										"exec": [
											"utils = {\r",
											"    isItemInArray: function(json, keyname, value) {\r",
											"            return Object.keys(json).some(key => {\r",
											"            return typeof json[key] === 'object' ? \r",
											"                this.isItemInArray(json[key], keyname, value) : key === keyname && json[key] === value;\r",
											"        });\r",
											"    }\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "d1f47795-debe-497d-92fb-2a7188517431",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"Germany\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/countries/country/add"
							},
							"response": []
						},
						{
							"name": "/api/countries/country/add (Fail 400)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7142455a-8e7a-4e9c-971e-80cecb99c5ab",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											" \r",
											"pm.test('Schema validation', () => {\r",
											"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('lookup_action_validation_schema_2')));\r",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "308a5dce-85a6-4072-948d-d82096013ac0",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"Germany\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/countries/country/add"
							},
							"response": []
						},
						{
							"name": "/api/countries/country/update",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "49bcbf25-01f1-4fb1-abbb-f7f6bf9aa284",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Schema validation', () => {\r",
											"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('lookup_action_schema')));\r",
											"}); \r",
											"\r",
											"let jsonData = pm.response.json();   \r",
											"\r",
											"pm.test(\"Has country id greater than zero\", function () { \r",
											"    pm.expect(jsonData).to.be.an(\"object\", \"Could not find the country\");\r",
											"    pm.expect(jsonData.id).to.be.greaterThan(0); \r",
											"});\r",
											"\r",
											"pm.test(\"The response contains a valid country name in the response\", function () { \r",
											"    pm.expect(utils.isItemInArray(jsonData, \"name\" , pm.environment.get(\"countryUpdateName\"))).to.be.true;\r",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "83d72bb1-7c22-46c2-929a-7492eea97938",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Id\": {{countryId}},\r\n    \"Name\": \"{{countryUpdateName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/countries/country/update"
							},
							"response": []
						},
						{
							"name": "/api/countries/country/update (Fail 400)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d254b85a-0c45-45fe-a775-f0ecbe1467f7",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Schema validation', () => {\r",
											"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('lookup_action_validation_schema_2')));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "f73b7ad0-d155-4511-b92e-0ed489886c6a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Id\": {{countryId}},\r\n    \"Name\": \"GermanyGermanyGermanyGermanyGermanyGermanyGermanyGermanyGermany\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/countries/country/update"
							},
							"response": []
						},
						{
							"name": "/api/countries (Success)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "14412867-46e8-483d-93a0-e08210021b84",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											" \r",
											"pm.test('Schema validation', () => {\r",
											"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('lookup_schema')));\r",
											"}); \r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"countries present\", () => {  \r",
											"    pm.expect(jsonData).to.have.length > 4;\r",
											"});\r",
											" \r",
											"pm.test(\"Has England\", function () { \r",
											"    const country = jsonData.find(m => m.name === \"England\");    \r",
											"    pm.expect(country).to.be.an(\"object\", \"Could not find the country\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3e7289fa-b0cc-46cd-975f-7ce7585cc6d1",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "c08e400d-b7f6-48e2-a5c0-c031b369908e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{baseUrl}}/api/countries"
							},
							"response": []
						},
						{
							"name": "/api/countries/country/{{countryId}} (Success)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "37f60ec5-fd59-4c66-86ae-5c9f78145dac",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Schema validation', () => {\r",
											"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('lookup_action_schema')));\r",
											"}); \r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "44fa688d-dca9-4c47-b579-fddb1f38e058",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": "{{baseUrl}}/api/countries/country/{{countryId}}"
							},
							"response": []
						},
						{
							"name": "/api/countries/country/300 (Fail 404)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "adad33da-dcf1-44c0-99ec-855134b5d5dd",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test('Schema validation', () => {\r",
											"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('album_delete_schema')));\r",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "7e878644-1e5d-4d8c-9f75-ae50f16451e3",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": "{{baseUrl}}/api/countries/country/300"
							},
							"response": []
						}
					],
					"id": "10d29642-cdd6-4753-89c9-80950423a10a"
				},
				{
					"name": "Studio",
					"item": [
						{
							"name": "/api/studios/studio/add (Success)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "763b4f31-fe05-4918-855d-d430002d8312",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Schema validation', () => {\r",
											"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('lookup_action_schema')));\r",
											"}); \r",
											"\r",
											"let jsonData = pm.response.json();   \r",
											"\r",
											"pm.test(\"Has studio id greater than zero\", function () { \r",
											"    pm.expect(jsonData).to.be.an(\"object\", \"Could not find the studio\");\r",
											"    pm.expect(jsonData.id).to.be.greaterThan(0)\r",
											"});\r",
											"\r",
											"pm.environment.set(\"studioId\", jsonData.id);\r",
											"pm.environment.set(\"studioUpdateName\", jsonData.name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "b6dfe880-b3dd-446b-affc-4663a87081e3",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"Test Studio\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/studios/studio/add"
							},
							"response": []
						},
						{
							"name": "/api/studios/studio/add (Fail 400)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7142455a-8e7a-4e9c-971e-80cecb99c5ab",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											" \r",
											"pm.test('Schema validation', () => {\r",
											"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('lookup_action_validation_schema_2')));\r",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "4038b3b7-d1bd-4339-b296-0ca6bb3abe14",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"Test Studio\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/studios/studio/add"
							},
							"response": []
						},
						{
							"name": "/api/studios/studio/update",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "49bcbf25-01f1-4fb1-abbb-f7f6bf9aa284",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Schema validation', () => {\r",
											"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('lookup_action_schema')));\r",
											"}); \r",
											"\r",
											"let jsonData = pm.response.json();   \r",
											"\r",
											"pm.test(\"Has studio id greater than zero\", function () { \r",
											"    pm.expect(jsonData).to.be.an(\"object\", \"Could not find the studio\");\r",
											"    pm.expect(jsonData.id).to.be.greaterThan(0); \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "3f50e5cf-8778-4421-8b08-2f40ec54539d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Id\": {{studioId}},\r\n    \"Name\": \"{{studioUpdateName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/studios/studio/update"
							},
							"response": []
						},
						{
							"name": "/api/studios/studio/update (Fail 400)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d254b85a-0c45-45fe-a775-f0ecbe1467f7",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Schema validation', () => {\r",
											"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('lookup_action_validation_schema_2')));\r",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "41135688-b850-4e0b-8b2e-13d1d87a6df5",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Id\": {{studioId}},\r\n    \"Name\": \"studiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudio\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/studios/studio/update"
							},
							"response": []
						},
						{
							"name": "/api/studios (Success)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "14412867-46e8-483d-93a0-e08210021b84",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Schema validation', () => {\r",
											"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('lookup_schema')));\r",
											"}); \r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"studios present\", () => { \r",
											"    pm.expect(jsonData).to.have.length > 4;\r",
											"});\r",
											" \r",
											"pm.test(\"Has Island Studios\", function () { \r",
											"    const studio = jsonData.find(m => m.name === \"Island Studios London, Sound Techniques London\");    \r",
											"    pm.expect(studio).to.be.an(\"object\", \"Could not find the studio\");\r",
											"});\r",
											"   \r",
											"pm.test(\"The response contains a valid studio name in the response\", function () { \r",
											"    pm.expect(utils.isItemInArray(jsonData, \"name\" , pm.environment.get(\"studioUpdateName\"))).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "bf3f8e80-d5e9-4c90-a801-fe82806ed1bd",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{baseUrl}}/api/studios"
							},
							"response": []
						},
						{
							"name": "/api/studios/studio/{{studioId}} (Success)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "37f60ec5-fd59-4c66-86ae-5c9f78145dac",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Schema validation', () => {\r",
											"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('lookup_action_schema')));\r",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "7aba64b6-9ef8-4f82-9da5-d63ba2edc5d7",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": "{{baseUrl}}/api/studios/studio/{{studioId}}"
							},
							"response": []
						},
						{
							"name": "/api/studios/studio/300 (Fail 404)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "adad33da-dcf1-44c0-99ec-855134b5d5dd",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test('Schema validation', () => {\r",
											"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('album_delete_schema')));\r",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "08faba24-b6aa-404c-aacc-309a9ed73e86",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": "{{baseUrl}}/api/studios/studio/300"
							},
							"response": []
						}
					],
					"id": "e4c5651e-49a3-45d5-8a81-eea4cd9104aa"
				},
				{
					"name": "Record Label",
					"item": [
						{
							"name": "/api/record-labels/record-label/add (Success)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "763b4f31-fe05-4918-855d-d430002d8312",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Schema validation', () => {\r",
											"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('lookup_action_schema')));\r",
											"}); \r",
											"\r",
											"let jsonData = pm.response.json();   \r",
											"\r",
											"pm.test(\"Has record label id greater than zero\", function () { \r",
											"    pm.expect(jsonData).to.be.an(\"object\", \"Could not find the record label\");\r",
											"    pm.expect(jsonData.id).to.be.greaterThan(0)\r",
											"});\r",
											"\r",
											"pm.environment.set(\"recordLabelId\", jsonData.id);\r",
											"pm.environment.set(\"recordLabelUpdateName\", jsonData.name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "3d4d604d-ec94-4f20-84cc-0b898e91dba1",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"Tyke Records\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/record-labels/record-label/add"
							},
							"response": []
						},
						{
							"name": "/api/record-labels/record-label/add (Fail 400)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7142455a-8e7a-4e9c-971e-80cecb99c5ab",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											" \r",
											"pm.test('Schema validation', () => {\r",
											"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('lookup_action_validation_schema_2')));\r",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "a7d4f5e6-785c-414a-9dde-ab1aaa56bb0a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"Tyke Records\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/record-labels/record-label/add"
							},
							"response": []
						},
						{
							"name": "/api/record-labels/record-label/update",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "49bcbf25-01f1-4fb1-abbb-f7f6bf9aa284",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Schema validation', () => {\r",
											"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('lookup_action_schema')));\r",
											"}); \r",
											"\r",
											"let jsonData = pm.response.json();   \r",
											"\r",
											"pm.test(\"Has record label id greater than zero\", function () { \r",
											"    pm.expect(jsonData).to.be.an(\"object\", \"Could not find the record label\");\r",
											"    pm.expect(jsonData.id).to.be.greaterThan(0); \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "2fdeaabb-4599-4071-8341-1d0cacef42d0",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Id\": {{recordLabelId}},\r\n    \"Name\": \"{{recordLabelUpdateName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/record-labels/record-label/update"
							},
							"response": []
						},
						{
							"name": "/api/record-labels/record-label/update (Fail 400)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d254b85a-0c45-45fe-a775-f0ecbe1467f7",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Schema validation', () => {\r",
											"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('lookup_action_validation_schema_2')));\r",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "1dee622e-db5d-423f-b183-83a2ccc4d49d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Id\": {{recordLabelId}},\r\n    \"Name\": \"studiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudiostudio\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/record-labels/record-label/update"
							},
							"response": []
						},
						{
							"name": "/api/record-labels (Success)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "14412867-46e8-483d-93a0-e08210021b84",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Schema validation', () => {\r",
											"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('lookup_schema')));\r",
											"}); \r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"record-labels present\", () => {   \r",
											"    pm.expect(jsonData).to.have.length > 4;\r",
											"}); \r",
											"\r",
											"pm.test(\"Has Atlantic Records\", function () { \r",
											"    const recordLabel = jsonData.find(m => m.name === \"Atlantic Records\");    \r",
											"    pm.expect(recordLabel).to.be.an(\"object\", \"Could not find the record label\");\r",
											"});\r",
											"   \r",
											"pm.test(\"The response contains a valid record label name in the response\", function () { \r",
											"    pm.expect(utils.isItemInArray(jsonData, \"name\" , pm.environment.get(\"recordLabelUpdateName\"))).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d1187d82-302d-4160-9196-b6abf27bf472",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "b1c88b3a-618a-4d60-a78b-4c106edfb0fa",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{baseUrl}}/api/record-labels"
							},
							"response": []
						},
						{
							"name": "/api/record-labels/record-label/{{recordLabelId}} (Success)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "37f60ec5-fd59-4c66-86ae-5c9f78145dac",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Schema validation', () => {\r",
											"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('lookup_action_schema')));\r",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "393f6751-ff90-41e7-a8ac-6dc1815319d9",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": "{{baseUrl}}/api/record-labels/record-label/{{recordLabelId}}"
							},
							"response": []
						},
						{
							"name": "/api/record-labels/record-label/300 (Fail 404)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "adad33da-dcf1-44c0-99ec-855134b5d5dd",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test('Schema validation', () => {\r",
											"  pm.response.to.have.jsonSchema (JSON.parse(pm.environment.get('album_delete_schema')));\r",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "179e2e9f-4bbe-4a3b-9976-c30e78944e08",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": "{{baseUrl}}/api/record-labels/record-label/300"
							},
							"response": []
						}
					],
					"id": "194cb9b5-0c5e-42cf-9f87-adf4d5103793"
				}
			],
			"id": "65b5a9c1-0d3b-4ae2-92cf-3584a9ba9557"
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": {
			"token": "{{token}}"
		}
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				],
				"id": "b3093ca0-076d-444c-9022-8d70e5e6d1e7"
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				],
				"id": "55c4df9d-8e1f-4fef-b051-b0453c102613"
			}
		}
	]
}